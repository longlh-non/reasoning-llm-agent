You are an agent trying to find a CHEESE and avoiding a SHOCK in a grid world DIMENSION D. The location in the grid world should be encoded into (y, x) coordinators where START is the starting location of yours.

One location in the grid world contains a cue: CUE 1. There will be four additional locations that will serve as possible locations for a second cue: CUE 2. Crucially, only one of these four additional locations will actually contain CUE 2 - the other 3 will be empty. When you visit CUE 1 by moving to its location, one of four signals is presented, which each unambiguously signals which of the 4 possible locations CUE 2 occupies -- you can refer to these Cue-2-location-signals with obvious names: L1, L2, L3, L4. Once CUE 2's location has been revealed, by visiting that location the agent will then receive one of two possible signals that indicate where the hidden reward is located (and conversely, where the hidden punishment lies). 

These two possible reward/punishment locations are indicated by two locations and we have 2 ways to define this: 
- [TOP, BOTTOM]: "TOP" (meaning the CHEESE reward is on the upper of the two locations and SHOCK punishment is on the lower one) or "BOTTOM" (meaning the CHEESE  reward is on the lower of the two locations and SHOCK punishment is on the upper one). 
- [LEFT, RIGHT]: "LEFT" (meaning the CHEESE reward is on the lefter of the two locations and SHOCK punishment is on the righter one) or "RIGHT" (meaning the CHEESE  reward is on the righter of the two locations and SHOCK punishment is on the lefter  one). 

These are the actions you can only do: UP, DOWN, LEFT, RIGHT, STAY and you can only perform and move one location per state.

If you reach CUE 1, ask for CUE 2 information.

If you reach CUE 2, ask for REWARD information.


ENVIRONMENT SET UP: 
{
    grid_world_dimension: (6x8),
    start: (0, 4),
    cue_1_location: (1, 0),
    cue_2_location: {L1: (2, 1), L2 (2, 6), L3: (5 , 2), L4: (4, 3)},
    reward_locations: {LEFT: (3, 1), RIGHT:  (3, 4)}
}

Response should be in this format and no nothing else: 

{{
    \"location\": \"the current location in the format (y, x)\",
    \"action\": \"you should inference for the next action. Then, tell the user about the next action - LEFT, RIGHT, UP, DOWN, STAY))\",
    \"next_location\": \"your next location in the format (y, x)\",
    \"current_location_name\": \"your current location in the format (y, x) or cue_1 (if you are ons on CUE 1) or cue_2 (CUE 2 location) or cheese (if you are on cheese) or shock (shock location)\",
    \"next_location_name\": \"your next location in the format (y, x) or cue_1 (if you are ons on CUE 1) or cue_2 (CUE 2 location) or cheese (if you are on cheese) or shock (shock location)\"
}}

STOP AND RESPONST WITH VISUALIZATION EVERY STATE
If you are at the CUE location, the next action should be STAY and wait for new information.

You should take the 7x7 dimension grid world visualization below as an example and create your own depend on ENVIRONMENT SET UP.
MAKE SURE THE AGENT, CUE 1, CUE 2, REWARD/PUNISHMENT ARE DISPLAYED ON THE VISUALISATION AND THE GRID WORLD IS IN THE RIGHT DIMENSION (6X8).
TRY TO MAKE IT LOOK TIDY

   0   1   2   3   4   5   6   - n
-+---+---+---+---+---+---+---+
0|   | X |   |   |   |   |   |
-+---+---+---+---+---+---+---+
1|   |   |   |   |   | T |   |
-+---+---+---+---+---+---+---+
2| C1|   | L1|   | L4|   |   |
-+---+---+---+---+---+---+---+
3|   | L |   | L2|   | R |   |
-+---+---+---+---+---+---+---+
4|   |   | L3|   |   |   |   |
-+---+---+---+---+---+---+---+
5|   |   |   |   |   | B |   |
-+---+---+---+---+---+---+---+
6|   |   |   |   |   |   |   |
-+---+---+---+---+---+---+---+
|
n